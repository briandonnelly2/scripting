<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Octostache</name>
    </assembly>
    <members>
        <member name="T:Octostache.Templates.ConditionalToken">
            <summary>
            Example: <code>#{if Octopus.IsCool}...#{/if}</code>
            Example: <code>#{if Octopus.CoolStatus != "Uncool"}...#{/if}</code>
            Example: <code>#{if Octopus.IsCool == Octostache.IsCool}...#{/if}</code>
            </summary>
        </member>
        <member name="T:Octostache.Templates.ContentExpression">
            <summary>
            The top-level "thing that has a textual value" that
            can be manipulated or inserted into the output.
            </summary>
        </member>
        <member name="T:Octostache.Templates.FunctionCallExpression">
            <summary>
            Syntactically this appears as the <code>| FilterName</code> construct, where
            the (single) argument is specified to the left of the bar. Under the hood this
            same AST node will also represent classic <code>Function(Foo,Bar)</code> expressions.
            </summary>
        </member>
        <member name="T:Octostache.Templates.SubstitutionToken">
            <summary>
            Example: <code>#{Octopus.Action[Foo].Name</code>.
            </summary>
        </member>
        <member name="T:Octostache.Templates.SymbolExpression">
            <summary>
            A value, identified using dotted/bracketed notation, e.g.:
            <code>Octopus.Action[Name].Foo</code>. This would classically
            be represented using nesting "property expressions" rather than a path, but in the
            current very simple language a path is more convenient to work with.
            </summary>
        </member>
        <member name="T:Octostache.Templates.SymbolExpressionStep">
            <summary>
            A segment of a <see cref="T:Octostache.Templates.SymbolExpression"/>,
            e.g. <code>Octopus</code>, <code>[Foo]</code>.
            </summary>
        </member>
        <member name="M:Octostache.VariableDictionary.Set(System.String,System.String)">
            <summary>
            Sets a variable value.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="P:Octostache.VariableDictionary.Item(System.String)">
            <summary>
            Gets or sets a variable by name.
            </summary>
            <param name="name">The name of the variable to set.</param>
            <returns>The current (evaluated) value of the variable.</returns>
        </member>
        <member name="M:Octostache.VariableDictionary.SetStrings(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Sets a variable to a list of strings, by joining each value with a separator.
            </summary>
            <param name="variableName">The name of the variable to set.</param>
            <param name="values">The list of values.</param>
            <param name="separator">The separator character to join by.</param>
        </member>
        <member name="M:Octostache.VariableDictionary.SetPaths(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets a variable to a list of values, by putting each value on a newline. Mostly used for file paths.
            </summary>
            <param name="variableName">The name of the variable to set.</param>
            <param name="values">The list of values.</param>
        </member>
        <member name="M:Octostache.VariableDictionary.Reload">
            <summary>
            If this variable dictionary was read from a file, reloads all variables from the file.
            </summary>
        </member>
        <member name="M:Octostache.VariableDictionary.GetRaw(System.String)">
            <summary>
            Performs the raw (not evaluated) value of a variable.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <returns>The value of the variable, or null if one is not defined.</returns>
        </member>
        <member name="M:Octostache.VariableDictionary.Get(System.String,System.String)">
            <summary>
            Gets the value of a variable, or returns a default value if the variable is not defined. If the variable contains an expression, it will be evaluated first.
            </summary>
            <param name="variableName">The name of the variable.</param>
            <param name="defaultValue">The default value to return.</param>
            <returns>The value of the variable, or the default value if the variable is not defined.</returns>
        </member>
        <member name="M:Octostache.VariableDictionary.Get(System.String,System.String@,System.String)">
            <summary>
            Gets the value of a variable, or returns a default value if the variable is not defined. If the variable contains an expression, it will be evaluated first.
            </summary>
            <param name="variableName">The name of the variable.</param>
            <param name="error">Any parsing errors silently found.</param>
            <param name="defaultValue">The default value to return.</param>
            <returns>The value of the variable, or the default value if the variable is not defined.</returns>
        </member>
        <member name="M:Octostache.VariableDictionary.Evaluate(System.String,System.String@,System.Boolean)">
            <summary>
            Evaluates a given expression as if it were the value of a variable.
            </summary>
            <param name="expressionOrVariableOrText">The value or expression to evaluate.</param>
            <param name="error">Any parsing errors silently found.</param>
            <param name="haltOnError">Stop parsing if an error is found.</param>
            <returns>The result of the expression.</returns>
        </member>
        <member name="M:Octostache.VariableDictionary.Evaluate(System.String)">
            <summary>
            Evaluates a given expression as if it were the value of a variable.
            </summary>
            <param name="expressionOrVariableOrText">The value or expression to evaluate.</param>
            <returns>The result of the expression.</returns>
        </member>
        <member name="M:Octostache.VariableDictionary.GetStrings(System.String,System.Char[])">
            <summary>
            Gets a list of strings, assuming each path is separated by commas or some other separator character. If the variable contains an expression, it will be evaluated first.
            </summary>
            <param name="variableName">The name of the variable to find.</param>
            <param name="separators">The separators to split the list by. Defaults to a comma if no other separators are passed.</param>
            <returns>The list of strings, or an empty list if the value is null or empty.</returns>
        </member>
        <member name="M:Octostache.VariableDictionary.GetPaths(System.String)">
            <summary>
            Gets a list of paths, assuming each path is separated by newlines. If the variable contains an expression, it will be evaluated first.
            </summary>
            <param name="variableName">The name of the variable to find.</param>
            <returns>The list of strings, or an empty list if the value is null or empty.</returns>
        </member>
        <member name="M:Octostache.VariableDictionary.GetFlag(System.String,System.Boolean)">
            <summary>
            Gets a given variable by name. If the variable contains an expression, it will be evaluated. Converts the variable to a boolean using <code>bool.TryParse()</code>. Returns a given  
            default value if the variable is not defined, is empty, or isn't a valid boolean value.
            </summary>
            <param name="variableName">The name of the variable to find.</param>
            <param name="defaultValueIfUnset">The default value to return if the variable is not defined.</param>
            <returns>The boolean value of the variable, or the default value.</returns>
        </member>
        <member name="M:Octostache.VariableDictionary.GetInt32(System.String)">
            <summary>
            Gets a given variable by name. If the variable contains an expression, it will be evaluated. Converts the variable to an integer using <code>int.TryParse()</code>. Returns null 
            if the variable is not defined.
            </summary>
            <param name="variableName">The name of the variable to find.</param>
            <returns>The integer value of the variable, or null if not defined.</returns>
        </member>
        <member name="M:Octostache.VariableDictionary.Require(System.String)">
            <summary>
            Gets a given variable by name. If the variable contains an expression, it will be evaluated. Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the variable is not defined.
            </summary>
            <param name="name">The name of the variable to find.</param>
            <returns>The value </returns>
        </member>
        <member name="M:Octostache.VariableDictionary.GetNames">
            <summary>
            Gets the names of all variables in this dictionary.
            </summary>
            <returns>A list of variable names.</returns>
        </member>
    </members>
</doc>
